import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// Country detection utilities
export interface CountryInfo {
  name: string;
  code: string;
  flag: string;
}

// Common countries with their codes and flag emojis
export const COUNTRIES: { [key: string]: CountryInfo } = {
  'IN': { name: 'India', code: 'IN', flag: 'ðŸ‡®ðŸ‡³' },
  'US': { name: 'United States', code: 'US', flag: 'ðŸ‡ºðŸ‡¸' },
  'GB': { name: 'United Kingdom', code: 'GB', flag: 'ðŸ‡¬ðŸ‡§' },
  'CA': { name: 'Canada', code: 'CA', flag: 'ðŸ‡¨ðŸ‡¦' },
  'AU': { name: 'Australia', code: 'AU', flag: 'ðŸ‡¦ðŸ‡º' },
  'DE': { name: 'Germany', code: 'DE', flag: 'ðŸ‡©ðŸ‡ª' },
  'FR': { name: 'France', code: 'FR', flag: 'ðŸ‡«ðŸ‡·' },
  'JP': { name: 'Japan', code: 'JP', flag: 'ðŸ‡¯ðŸ‡µ' },
  'CN': { name: 'China', code: 'CN', flag: 'ðŸ‡¨ðŸ‡³' },
  'BR': { name: 'Brazil', code: 'BR', flag: 'ðŸ‡§ðŸ‡·' },
  'AE': { name: 'United Arab Emirates', code: 'AE', flag: 'ðŸ‡¦ðŸ‡ª' },
  'SA': { name: 'Saudi Arabia', code: 'SA', flag: 'ðŸ‡¸ðŸ‡¦' },
  'SG': { name: 'Singapore', code: 'SG', flag: 'ðŸ‡¸ðŸ‡¬' },
  'MY': { name: 'Malaysia', code: 'MY', flag: 'ðŸ‡²ðŸ‡¾' },
  'PH': { name: 'Philippines', code: 'PH', flag: 'ðŸ‡µðŸ‡­' },
  'TH': { name: 'Thailand', code: 'TH', flag: 'ðŸ‡¹ðŸ‡­' },
  'VN': { name: 'Vietnam', code: 'VN', flag: 'ðŸ‡»ðŸ‡³' },
  'ID': { name: 'Indonesia', code: 'ID', flag: 'ðŸ‡®ðŸ‡©' },
  'KR': { name: 'South Korea', code: 'KR', flag: 'ðŸ‡°ðŸ‡·' },
  'IT': { name: 'Italy', code: 'IT', flag: 'ðŸ‡®ðŸ‡¹' },
  'ES': { name: 'Spain', code: 'ES', flag: 'ðŸ‡ªðŸ‡¸' },
  'NL': { name: 'Netherlands', code: 'NL', flag: 'ðŸ‡³ðŸ‡±' },
  'SE': { name: 'Sweden', code: 'SE', flag: 'ðŸ‡¸ðŸ‡ª' },
  'NO': { name: 'Norway', code: 'NO', flag: 'ðŸ‡³ðŸ‡´' },
  'DK': { name: 'Denmark', code: 'DK', flag: 'ðŸ‡©ðŸ‡°' },
  'FI': { name: 'Finland', code: 'FI', flag: 'ðŸ‡«ðŸ‡®' },
  'CH': { name: 'Switzerland', code: 'CH', flag: 'ðŸ‡¨ðŸ‡­' },
  'AT': { name: 'Austria', code: 'AT', flag: 'ðŸ‡¦ðŸ‡¹' },
  'BE': { name: 'Belgium', code: 'BE', flag: 'ðŸ‡§ðŸ‡ª' },
  'IE': { name: 'Ireland', code: 'IE', flag: 'ðŸ‡®ðŸ‡ª' },
  'NZ': { name: 'New Zealand', code: 'NZ', flag: 'ðŸ‡³ðŸ‡¿' },
  'ZA': { name: 'South Africa', code: 'ZA', flag: 'ðŸ‡¿ðŸ‡¦' },
  'MX': { name: 'Mexico', code: 'MX', flag: 'ðŸ‡²ðŸ‡½' },
  'AR': { name: 'Argentina', code: 'AR', flag: 'ðŸ‡¦ðŸ‡·' },
  'CL': { name: 'Chile', code: 'CL', flag: 'ðŸ‡¨ðŸ‡±' },
  'CO': { name: 'Colombia', code: 'CO', flag: 'ðŸ‡¨ðŸ‡´' },
  'PE': { name: 'Peru', code: 'PE', flag: 'ðŸ‡µðŸ‡ª' },
  'VE': { name: 'Venezuela', code: 'VE', flag: 'ðŸ‡»ðŸ‡ª' },
  'EG': { name: 'Egypt', code: 'EG', flag: 'ðŸ‡ªðŸ‡¬' },
  'NG': { name: 'Nigeria', code: 'NG', flag: 'ðŸ‡³ðŸ‡¬' },
  'KE': { name: 'Kenya', code: 'KE', flag: 'ðŸ‡°ðŸ‡ª' },
  'GH': { name: 'Ghana', code: 'GH', flag: 'ðŸ‡¬ðŸ‡­' },
  'UG': { name: 'Uganda', code: 'UG', flag: 'ðŸ‡ºðŸ‡¬' },
  'TZ': { name: 'Tanzania', code: 'TZ', flag: 'ðŸ‡¹ðŸ‡¿' },
  'ET': { name: 'Ethiopia', code: 'ET', flag: 'ðŸ‡ªðŸ‡¹' },
  'MA': { name: 'Morocco', code: 'MA', flag: 'ðŸ‡²ðŸ‡¦' },
  'TN': { name: 'Tunisia', code: 'TN', flag: 'ðŸ‡¹ðŸ‡³' },
  'DZ': { name: 'Algeria', code: 'DZ', flag: 'ðŸ‡©ðŸ‡¿' },
  'LY': { name: 'Libya', code: 'LY', flag: 'ðŸ‡±ðŸ‡¾' },
  'SD': { name: 'Sudan', code: 'SD', flag: 'ðŸ‡¸ðŸ‡©' },
  'SS': { name: 'South Sudan', code: 'SS', flag: 'ðŸ‡¸ðŸ‡¸' },
  'CM': { name: 'Cameroon', code: 'CM', flag: 'ðŸ‡¨ðŸ‡²' },
  'CI': { name: 'Ivory Coast', code: 'CI', flag: 'ðŸ‡¨ðŸ‡®' },
  'SN': { name: 'Senegal', code: 'SN', flag: 'ðŸ‡¸ðŸ‡³' },
  'ML': { name: 'Mali', code: 'ML', flag: 'ðŸ‡²ðŸ‡±' },
  'BF': { name: 'Burkina Faso', code: 'BF', flag: 'ðŸ‡§ðŸ‡«' },
  'NE': { name: 'Niger', code: 'NE', flag: 'ðŸ‡³ðŸ‡ª' },
  'TD': { name: 'Chad', code: 'TD', flag: 'ðŸ‡¹ðŸ‡©' },
  'CF': { name: 'Central African Republic', code: 'CF', flag: 'ðŸ‡¨ðŸ‡«' },
  'CG': { name: 'Republic of the Congo', code: 'CG', flag: 'ðŸ‡¨ðŸ‡¬' },
  'CD': { name: 'Democratic Republic of the Congo', code: 'CD', flag: 'ðŸ‡¨ðŸ‡©' },
  'AO': { name: 'Angola', code: 'AO', flag: 'ðŸ‡¦ðŸ‡´' },
  'ZM': { name: 'Zambia', code: 'ZM', flag: 'ðŸ‡¿ðŸ‡²' },
  'ZW': { name: 'Zimbabwe', code: 'ZW', flag: 'ðŸ‡¿ðŸ‡¼' },
  'BW': { name: 'Botswana', code: 'BW', flag: 'ðŸ‡§ðŸ‡¼' },
  'NA': { name: 'Namibia', code: 'NA', flag: 'ðŸ‡³ðŸ‡¦' },
  'LS': { name: 'Lesotho', code: 'LS', flag: 'ðŸ‡±ðŸ‡¸' },
  'SZ': { name: 'Eswatini', code: 'SZ', flag: 'ðŸ‡¸ðŸ‡¿' },
  'MG': { name: 'Madagascar', code: 'MG', flag: 'ðŸ‡²ðŸ‡¬' },
  'MU': { name: 'Mauritius', code: 'MU', flag: 'ðŸ‡²ðŸ‡º' },
  'SC': { name: 'Seychelles', code: 'SC', flag: 'ðŸ‡¸ðŸ‡¨' },
  'KM': { name: 'Comoros', code: 'KM', flag: 'ðŸ‡°ðŸ‡²' },
  'DJ': { name: 'Djibouti', code: 'DJ', flag: 'ðŸ‡©ðŸ‡¯' },
  'SO': { name: 'Somalia', code: 'SO', flag: 'ðŸ‡¸ðŸ‡´' },
  'ER': { name: 'Eritrea', code: 'ER', flag: 'ðŸ‡ªðŸ‡·' },
  'RW': { name: 'Rwanda', code: 'RW', flag: 'ðŸ‡·ðŸ‡¼' },
  'BI': { name: 'Burundi', code: 'BI', flag: 'ðŸ‡§ðŸ‡®' },
  'MW': { name: 'Malawi', code: 'MW', flag: 'ðŸ‡²ðŸ‡¼' },
  'MZ': { name: 'Mozambique', code: 'MZ', flag: 'ðŸ‡²ðŸ‡¿' },
  'ST': { name: 'SÃ£o TomÃ© and PrÃ­ncipe', code: 'ST', flag: 'ðŸ‡¸ðŸ‡¹' },
  'CV': { name: 'Cape Verde', code: 'CV', flag: 'ðŸ‡¨ðŸ‡»' },
  'GW': { name: 'Guinea-Bissau', code: 'GW', flag: 'ðŸ‡¬ðŸ‡¼' },
  'GN': { name: 'Guinea', code: 'GN', flag: 'ðŸ‡¬ðŸ‡³' },
  'SL': { name: 'Sierra Leone', code: 'SL', flag: 'ðŸ‡¸ðŸ‡±' },
  'LR': { name: 'Liberia', code: 'LR', flag: 'ðŸ‡±ðŸ‡·' },
  'TG': { name: 'Togo', code: 'TG', flag: 'ðŸ‡¹ðŸ‡¬' },
  'BJ': { name: 'Benin', code: 'BJ', flag: 'ðŸ‡§ðŸ‡¯' }
};

// Function to get country info by code
export function getCountryInfo(countryCode: string): CountryInfo | null {
  const code = countryCode.toUpperCase();
  return COUNTRIES[code] || null;
}

// Function to get country info by name
export function getCountryInfoByName(countryName: string): CountryInfo | null {
  const name = countryName.toLowerCase();
  return Object.values(COUNTRIES).find(
    country => country.name.toLowerCase() === name
  ) || null;
}

// Function to detect user's country from location data
export function detectCountryFromLocation(location: any): CountryInfo | null {
  if (!location) return null;
  
  // If location is a string, try to extract country code
  if (typeof location === 'string') {
    // Check if it's a country code
    if (location.length === 2) {
      return getCountryInfo(location);
    }
    
    // Check if it's a country name
    return getCountryInfoByName(location);
  }
  
  // If location is an object with country property
  if (typeof location === 'object' && location.country) {
    return getCountryInfo(location.country);
  }
  
  return null;
}

// Function to get user's country from their profile or default to India
export function getUserCountry(user: any): CountryInfo {
  if (user?.location) {
    const countryInfo = detectCountryFromLocation(user.location);
    if (countryInfo) {
      return countryInfo;
    }
  }
  
  // Default to India if no country detected
  return COUNTRIES['IN'];
}

// Function to format country name with flag
export function formatCountryWithFlag(countryInfo: CountryInfo): string {
  return `${countryInfo.flag} ${countryInfo.name}`;
}
 